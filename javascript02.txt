 Higher order Function 


 
let getseven = function(){
    return 7
}
function useFunction(getseven){  //  isme function arguments me liya hai
return getseven()  //  function ko execute kar diya  
}
// console.log(useFunction(getseven)); // function ka reference pass kya hai



function returnFunction(){
    return getseven  // isme function return ho rha hai
}
const exFunc = returnFunction();
console.log(exFunc());



// Example of hOf  calculator banaiye

// function sum(x,y){
// return x+y
// }
// function subtract(x,y){
//     return x-y;
// }


// function calculatorFunction(fn ,x,y){
//     return fn(x,y)
// }
// console.log("Sum =",calculatorFunction(sum,1,2));
// console.log("subtract =",calculatorFunction(subtract,3,2));



// callback 

// function delivered(name ,callback){
//     console.log("done with deliver of " + name);
//     callback()
// }

// function successFunction(){
//     console.log('product has been successful delivered');
// }
// delivered("macbook",successFunction)

//+++++++++++++++++++++++++++++++++++++++++++++++

//callback hell





// return function 


// function multiple7(){
//     return function (x){
//         return x*7
//     }
// }
// const exe = multiple7()
// console.log(exe(7));



// function sum(x){
//     return function (y){
//         return x+y
//     }
// }

// console.log(sum(4)(5));



// function sum1(x){
//     return function(y){
//         return function(z){
//             return x+y+z
//         }
//     }
// }
// console.log(sum1(12)(12)(12));



// setInterval 


// let timer = setInterval(function(){
//     console.log("its time to drink water");
//     console.log(new Date());
//     clearInterval(timer);
// },5000)



// settomeout 

// let timerid = setTimeout(function(){
//     console.log("first task");
//     clearTimeout(timerid)
// },1000)

// setTimeout(function(){
//     console.log("second task");
// },2000)

// setTimeout(function(){
//     console.log("third task");
// },3000)



//+++++++++++++++++++++++++++++++++++++++++++++


Function programing 


// foreach 

let courseIncart = [
    {
        name:"javascript",
        duration:' 3 month'
    },
    {
        name:"c++",
    },
    {
        name:"Python",
    },
    {
        name:"c",
    }
]

courseIncart.forEach((item,idx) =>{
console.log(item);
// console.log(item.name);
// console.log(`index: ${idx},Item = ${item.name} `);
})


// map 


let output =[]
const prices = [1000,1500,3500,2500]
// output after 50% discount 
prices.forEach(function(item){
   output.push(item*0.5)
})
// console.log(output);



const newprices = prices.map(function(item,idx){
return item*0.5
})
// console.log(newprices);


// string convert into number 
const prices12 = ['1000','1500','3500','2500']
let result1 = prices12.map(function(item,index){
    return Number(item)
})
// console.log(result1);



// filter 

const prices1 = [1000,1500,3500,2500]
const filterPrices = prices1.filter(function(item,index) {
    if(item<2000){
        return true
    }
    else{
        return false
    }
})
// console.log(filterPrices);



const name1 = ["hassan","saud","asharflol","saifullahlol","saif"]
let charLessfive = name1.filter(function(char){
    if(char.length <=6){
        return true
    }
    else{
        return false
    }
})
// console.log(charLessfive);



let names = ['hassanlol','ashraf','saif','dawoodlol']
let nameWithlol = names.filter(function(item,index){
  return  item.endsWith("lol")
})
// console.log(nameWithlol);


// reduce =>  reduce se single value milti hai

const prices2 = [1000,1500,3500,2500]
let sumcourse = prices2.reduce(function(sum,item,index){
sum = sum +item
return sum
},0)

// console.log(sumcourse);




// every => every methid check all the item in an array pass the specified condition or not

const prices3 = [1000,1500,3500,'2500']
let allAreNumbers = prices3.every(function(item,index){
    return typeof item==="number"
})
console.log('every = ',allAreNumbers);


// find 

let courses = ["javascript","python","c++"]
 let search = courses.find(function(item,index){
    return item==="javascrips"
})
console.log(search);


// sort 


let courses1 = ["javascript","python","c++"]
let sorted = courses1.sort()
// console.log(sorted);


const prices5 = [1000,100,150,1500,3500,2500]

const number = prices5.sort(function(a,b){
    if (a>b){
        return 1;

    }
    if (a<b) {
        return -1;
    }
    return 0
})

// console.log(number);



//+++++++++++++++++++++++++++++++++++++++++++++


Destructuring 


const one = [1,2,3,4,5]
const twoArray = [6,7,8,9]
// const threeArray = one.concat(twoArray)

// const threeArray =[one,twoArray]
// console.log(threeArray);


// const threeArray = [...one,...twoArray]
// console.log(threeArray);



//+++++++++++++++++++++++++++++++++++++++
// Question : ek function banao jitni bhi arguments aaye unko array ke andar chahiye 

function manyargs(){
    let args = Array.from(arguments)
    console.log(typeof arguments);
    let final = args.map(e => e)
    console.log(final);
}

manyargs(1,2,3,4,5)
manyargs(1,2,3,4,5,6,7,8)


// rest 

function manyargs1(...args){
let finalArr = args.map(item => item)
console.log(finalArr);
}

manyargs1(1,2,3,4,5,6)


// +++++++++++++++++++++++++++++++++

const names = ["superman","flash"]
const newname = ["batman",...names,"thor"]
console.log(newname);


const sitename = 'PW Skills'
console.log([...sitename]);



// Spred  example 


function pwskills(...value){
    return value
}
console.log(pwskills("hassan ","ashraf","Dawood Ahmed"));





function pwskills(...value){
return value
}

console.log(pwskills("hassan","ashraf"));



//+++++++++++++++++++++++++++++++++++++++++++++


Try and catch 


// try{
// let x = undefined
// console.log(x[0]);
// }catch{
// console.log("error handling in catch");
// } finally{
// console.log("finally always get executed");
// }



// try{
//     console.log("hello");
//     console.log(a);
//     console.log('ending try');
// } catch{
//     console.log("handled");
// }
// console.log("End");



//++++++++++++++++++++++++++++++++++++++++++++



// classes 


class product {
    // properties -> variables -> data member
    // name;
    // price;
    // ratting;


#price;
    constructor(n,p,r){
        console.log('call the constructor');
        this.name = n;  // this ek  object ko refer ya point karta hai
        this.#price = p;
        this.ratting = r;
        // return 10 // if you are rturning primitive then it will be avoid in constructor
    
        // return {x:0, y:20} // if you return non primitive then it will be return
        }

        static custom(){
            console.log('calling a static method');
        }

        get ratting(){
            console.log(this.#price);
        }

    // behaviours -> functions -> member functions
    display(){
        console.log("display the movie");
        console.log(this);
        console.log(this.name);
    }
    

}

let pro = new product('iphone',10000,5) // new -> creeate an empty plain object
// -> in the above piece of code we are calling the constructor


// console.log(pro);
// console.log(pro.name);
// pro.display()

// constructor multiple define hi ho sakte javascript me
// this keyword refer to the context from where we called


// product.custom()  // static function class ke sath join hote hai

// p.rating()



//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

prototype 


let myheros = ["thor","spiderman"]
let dcheros = ['superman','flash']

let herospower = {
    thor:"hammer",
    spider:'sling',

getspiderPower :function(){
console.log(`spidy power is ${this.spider}`);
}
}

Object.prototype.hassan = function(){
    console.log('hassan is present in all object');
}

console.log(myheros.hassan());
console.log(herospower.hassan());


Array.prototype.hihassan =function(){
    console.log('hassan says hii');
}
 

console.log(myheros.hihassan());
console.log(herospower.hihassan());



// // inheritance

// const user = {
//     name :"ashraf",
//     email:"a2gaim.com"
// }
// const Teacher = {
//     makeVedios : true
// }

// const TeacherSupport = {
//     isAvailable:false
// }
// const TAassistant = {
// makeAssignment :"js Assignment",
// fulltime :true,
// __proto__:TeacherSupport
// }
// console.log(TAassistant.isAvailable);

// // Teacher.__proto__=user


// Object.setPrototypeOf(user,Teacher)


// String.prototype.truelength = function(){
//     console.log(`True length is ${this.trim().length}`);
// }

// "hassan      ".truelength()
// "daud   ".truelength()